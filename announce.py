import asyncio
import logging
from aiogram import Bot, Dispatcher
import asyncpg
import os

from aiogram.enums import ParseMode
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot token from environment variables
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Database connection parameters
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = os.getenv("DB_PORT", "5432")
DB_NAME = os.getenv("DB_NAME", "database")
DB_USER = os.getenv("DB_USER", "postgres")
DB_PASS = os.getenv("DB_PASSWORD", "postgres")

# Announcement messages for different languages
ANNOUNCEMENTS = {
    "en": """üì¢ *Bilag'on 1.1.0 Update ‚Äì Smarter, Faster, Better!*

üöÄ *Big News!*
Bilag'on just got a major upgrade! With version 1.1.0, your favorite AI-powered assistant is now more efficient, smarter, and packed with new features to make your experience even better.

üéØ *What's New?*

üèó *Smoother Performance:*
- The bot now responds faster and handles requests more efficiently.
- Improved system stability for a seamless experience.

ü§ñ *Smarter AI Features:*
- OpenAI integration is now optimized for better accuracy.
- Text generation is more natural and reliable.

üñº *New Media Capabilities:*
- Convert images to text effortlessly.
- Use voice-to-text for quick and easy communication.

üåç *Enhanced User Experience:*
- Get updates and messages in multiple languages.
- Enjoy smart suggestions to make your conversations even more engaging.

üõ† *Bug Fixes & Optimizations:*
- We've cleaned up old code and removed unnecessary dependencies.
- Various issues have been fixed to improve overall stability.

üéâ *Ready to Try?*
Bilag'on 1.1.0 is here to make your experience smoother, faster, and more intuitive. Thank you for being a part of the journey‚Äîenjoy the new features! üöÄ""",

    "ru": """üì¢ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Bilag'on 1.1.0 ‚Äì –£–º–Ω–µ–µ, –ë—ã—Å—Ç—Ä–µ–µ, –õ—É—á—à–µ!*

üöÄ *–ë–æ–ª—å—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!*
Bilag'on –ø–æ–ª—É—á–∏–ª —Å–µ—Ä—å–µ–∑–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ! –í –≤–µ—Ä—Å–∏–∏ 1.1.0 –≤–∞—à –ª—é–±–∏–º—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å—Ç–∞–ª –µ—â–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ, —É–º–Ω–µ–µ –∏ —É–¥–æ–±–Ω–µ–µ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.

üéØ *–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?*

üèó *–ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞:*
- –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ.
- –£–ª—É—á—à–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

ü§ñ *–£–º–Ω—ã–µ AI-—Ñ—É–Ω–∫—Ü–∏–∏:*
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI —Å—Ç–∞–ª–∞ –µ—â–µ —Ç–æ—á–Ω–µ–µ.
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç–µ–ø–µ—Ä—å –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è.

üñº *–ù–æ–≤—ã–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
- –õ–µ–≥–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç.
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.

üåç *–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç:*
- –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —è–∑—ã–∫–∞—Ö.
- –£–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–∏ –±–µ—Å–µ–¥—ã –µ—â–µ —É–¥–æ–±–Ω–µ–µ.

üõ† *–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:*
- –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–¥ –∏ –Ω–µ–Ω—É–∂–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.

üéâ *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!*
Bilag'on 1.1.0 —Å—Ç–∞–ª –µ—â–µ —É–¥–æ–±–Ω–µ–µ, –±—ã—Å—Ç—Ä–µ–µ –∏ —É–º–Ω–µ–µ. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏! üöÄ""",

    "uz": """üì¢ *Bilag'on 1.1.0 Yangilanishi ‚Äì Aqlliroq, Tezroq, Yaxshiroq!*

üöÄ *Katta yangiliklar!*
Bilag'on katta yangilanish oldi! 1.1.0 versiyasi bilan sevimli AI-yordamchingiz endi yanada samarali, aqlli va foydalanuvchilarga qulay bo'ldi.

üéØ *Nimalar yangilandi?*

üèó *Tezroq va barqaror ishlash:*
- Bot endi tezroq javob beradi va yanada samarali ishlaydi.
- Tizim barqarorligi yaxshilandi.

ü§ñ *Aqlli AI imkoniyatlari:*
- OpenAI integratsiyasi yanada aniqroq ishlaydi.
- Matn generatsiyasi yanada tabiiy va ishonchli bo'ldi.

üñº *Yangi media imkoniyatlari:*
- Rasmlarni osongina matnga aylantiring.
- Tez va qulay muloqot uchun ovozni matnga aylantirish funksiyasi qo'shildi.

üåç *Foydalanuvchi tajribasini yaxshilash:*
- Yangiliklar va xabarlar endi bir nechta tillarda mavjud.
- Aqlli tavsiyalar muloqotni yanada qiziqarli qiladi.

üõ† *Xatolar tuzatildi va tizim optimallashtirildi:*
- Eskirgan kod va keraksiz kutubxonalar olib tashlandi.
- Barqarorlikni oshirish uchun turli xatolar tuzatildi.

üéâ *Sinab ko'rishga tayyormisiz?*
Bilag'on 1.1.0 endi yanada tezkor, aqlli va qulay. Biz bilan bo'lganingiz uchun rahmat! Yangi imkoniyatlardan bahramand bo'ling! üöÄ"""
}

# Default language if user's preference is not available
DEFAULT_LANGUAGE = "en"


async def send_announcements():
    # Create bot instance
    bot = Bot(token=BOT_TOKEN)

    try:
        # Connect to database
        logger.info("Connecting to the database...")
        conn = await asyncpg.connect(
            host=DB_HOST,
            port=DB_PORT,
            database=DB_NAME,
            user=DB_USER,
            password=DB_PASS
        )

        logger.info("Connected to database. Fetching users...")

        # Fetch all users with telegram_id and language
        users = await conn.fetch("SELECT telegram_id, language FROM users")

        logger.info(f"Found {len(users)} users to notify")

        # Send announcements to each user
        success_count = 0
        failed_count = 0

        for user in users:
            telegram_id = user['telegram_id']
            language = user['language'] if user['language'] in ANNOUNCEMENTS else DEFAULT_LANGUAGE

            try:
                # Get the appropriate announcement for the user's language
                announcement = ANNOUNCEMENTS[language]

                # Send the message
                await bot.send_message(
                    chat_id=telegram_id,
                    text=announcement,
                    parse_mode=ParseMode.MARKDOWN
                )

                success_count += 1

                # Add delay to avoid hitting rate limits
                await asyncio.sleep(0.05)

                # Log progress for every 100 users
                if success_count % 100 == 0:
                    logger.info(f"Progress: {success_count}/{len(users)} messages sent")

            except Exception as e:
                logger.error(f"Failed to send message to user {telegram_id}: {e}")
                failed_count += 1

        logger.info(f"Announcement sending completed. Successful: {success_count}, Failed: {failed_count}")

    except Exception as e:
        logger.error(f"Error: {e}")
    finally:
        # Close database connection
        if 'conn' in locals():
            await conn.close()
            logger.info("Database connection closed")

        # Close bot session
        await bot.session.close()
        logger.info("Bot session closed")


if __name__ == "__main__":
    logger.info("Starting announcement sender...")

    # Run the announcement sender
    asyncio.run(send_announcements())

    logger.info("Process completed")